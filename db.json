{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","path":"js/jquery-3.6.4.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1694227902456},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1694228235969},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"b608c1f1322760dce9805285a602a95832730a2e","modified":1694228236552},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"4bf95d52f77edf811f23f6d264a7493311a8d078","modified":1694228236547},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"1a9b279e6dd29fd19245f913f0c4a316ffaa62db","modified":1694228236547},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":1694228236452},{"_id":"node_modules/hexo-theme-landscape/languages/de-DE.yml","hash":"d29d1c4256b7ed9df42f511c2ff0a23ad5fd6c1f","modified":1694228236552},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1694228236553},{"_id":"node_modules/hexo-theme-landscape/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1694228236553},{"_id":"node_modules/hexo-theme-landscape/languages/es-ES.yml","hash":"7008a8fc91f18d2a735864817b8ebda30c7a2c66","modified":1694228236553},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1694228236553},{"_id":"node_modules/hexo-theme-landscape/languages/en-GB.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1694228236553},{"_id":"node_modules/hexo-theme-landscape/languages/en-US.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1694228236553},{"_id":"node_modules/hexo-theme-landscape/languages/fr-FR.yml","hash":"8d09dbdab00a30a2870b56f7c0a7ca7deafa7b88","modified":1694228236554},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1694228236553},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1694228236554},{"_id":"node_modules/hexo-theme-landscape/languages/hu-HU.yml","hash":"712d18664898fa21ba38d4973e90ef41a324ea25","modified":1694228236554},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":1694228236554},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":1694228236555},{"_id":"node_modules/hexo-theme-landscape/languages/it-IT.yml","hash":"2cb6dc2fab9bd2dbe1c8bb869a9e8bf85a564fdd","modified":1694228236555},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1694228236555},{"_id":"node_modules/hexo-theme-landscape/languages/ja-JP.yml","hash":"08481267e0c112e1f6855620f2837ec4c4a98bbd","modified":1694228236555},{"_id":"node_modules/hexo-theme-landscape/languages/mn-MN.yml","hash":"b9e5f3e7c0c2f779cf2cfded6db847b5941637ca","modified":1694228236555},{"_id":"node_modules/hexo-theme-landscape/languages/ko-KR.yml","hash":"19209ad8f9d4057e8df808937f950eb265e1db69","modified":1694228236555},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1694228236555},{"_id":"node_modules/hexo-theme-landscape/languages/nl-NL.yml","hash":"5ebbc30021f05d99938f96dfff280392df7f91f0","modified":1694228236556},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":1694228236556},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1694228236556},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1694228236556},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1694228236557},{"_id":"node_modules/hexo-theme-landscape/languages/pt-PT.yml","hash":"0f852b6b228e6ea59aa3540574bb89b233f2a098","modified":1694228236556},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1694228236556},{"_id":"node_modules/hexo-theme-landscape/languages/th.yml","hash":"84a55b00aa01f03982be294e43c33a20e6d32862","modified":1694228236557},{"_id":"node_modules/hexo-theme-landscape/languages/th-TH.yml","hash":"ebfdba9bc4842c829473c1e6e4544344f182724d","modified":1694228236557},{"_id":"node_modules/hexo-theme-landscape/languages/ru-RU.yml","hash":"360d11a28bb768afb1dd15f63fa7fd3a8cc547ee","modified":1694228236556},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":1694228236557},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":1694228236557},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1694228236557},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1694228235971},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1694228235976},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1694228235977},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1694228235974},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":1694228235976},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"377d257d5d16e0158a4405c72401517b074fd7ff","modified":1694228235970},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1694228235977},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1694228235978},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"7cb70a7a54f8c7ae49b10d1f37c0a9b74eab8826","modified":1694228235971},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1694228235970},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"56597e951203dd662a6d2c817c7c4f1c920d4a25","modified":1694228235972},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":1694228235974},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"f05bced793b0314d4f2ef0c993b3a51d0b7d203a","modified":1694228235975},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1694228235976},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":1694228235975},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":1694228235975},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"6a5033d189554c9a6d42e2ef7952ae5c9742648e","modified":1694228235975},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1694228235977},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1694228235974},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1694228235978},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1694228235978},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1694228235971},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1694228236548},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":1694228235977},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"ca28281423ae57d76b6c1eb91cd845fd4e518bd6","modified":1694228236548},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1694228236546},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"e55a1d92954ed20f6887f92dc727bb995a010a43","modified":1694228236552},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1694228235970},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1694228235973},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1694228235977},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":1694228235974},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1694228235976},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1694228235974},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1694228236548},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":1694228235978},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1694228236549},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"268d2989acb06e2ddd06cc36a6918c6cd865476b","modified":1694228236550},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"2d1f6f79ebf9cb55ebdb3865a2474437eb2b37c6","modified":1694228236549},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1694228236549},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1694228236551},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1694228236551},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"9cc3b2927d814f2f6e8e188f9d3657b94f4c6ef3","modified":1694228236550},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1694228236551},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1694228236551},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1694228236549},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1694228236550},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1694228236461},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1694228236545},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1694228236452},{"_id":"public/archives/2023/index.html","hash":"647f4be3830181334c5bbc409f9adb613af11258","modified":1694250548623},{"_id":"public/2023/09/09/hello-world/index.html","hash":"8b0f2e938d6ac788e2fee5a6a1c3b69295eb72ca","modified":1694239719148},{"_id":"public/index.html","hash":"6da5249f57e8508a34b23ca53bc96a4e3ef6900b","modified":1694250548623},{"_id":"public/archives/2023/09/index.html","hash":"8dddc2e0c4cc411c0cb6d015f5c782fd9641d543","modified":1694250548623},{"_id":"public/archives/index.html","hash":"db2ce67d54955c39ede6f795554d018dadd31610","modified":1694250548623},{"_id":"public/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1694250548623},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1694250548623},{"_id":"public/css/style.css","hash":"ddb3792605d744ab3d9f0a649c82b62e9b16daa6","modified":1694250548623},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1694250548623},{"_id":"public/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1694250548623},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1694250548623},{"_id":"source/_posts/data-table-in-ue4.md","hash":"5660b17c4da25b093b64ab21e2c7e24957484e9e","modified":1694245972548},{"_id":"source/_posts/DataTable-in-UE4.md","hash":"c26e2f905c3aa20fb6e0cfcb5b01f684341e8a12","modified":1694248850686},{"_id":"source/_posts/DataTable-in-UE4/1.png","hash":"8aba81ea1bf3b6a002dec6116c449342079f251b","modified":1694247561175},{"_id":"public/2023/09/09/DataTable-in-UE4/index.html","hash":"9e19e3e9fd90404a3dae67071a71e2aa1ddbc5ff","modified":1694250548623},{"_id":"public/tags/数据表/index.html","hash":"bece3395745db51c0b1dd629bde4c1582e9fb978","modified":1694250548623},{"_id":"public/tags/Unreal-Engine/index.html","hash":"dc3fe1817d83331f12bdf7a906a5d1e4dd004534","modified":1694250548623},{"_id":"public/categories/Unreal-Engine/index.html","hash":"8f46768a10e50e09d7d562838f96fe36e8806118","modified":1694250548623},{"_id":"public/2023/09/09/DataTable-in-UE4/1.png","hash":"8aba81ea1bf3b6a002dec6116c449342079f251b","modified":1694250548623}],"Category":[{"name":"UnrealEngine","_id":"clmbrc1gc00019wua8pg44i1e"},{"name":"Unreal Engine","_id":"clmbrqldi00069wua6hix5ttp"}],"Data":[],"Page":[],"Post":[{"title":"UE4中的数据表","date":"2023-09-09T07:38:57.000Z","_content":"\n- UE版本: 4.27.2, 系统: Windows\n\n# 1. 数据表是什么？\n\n数据表（DataTable）是UE4中的一种数据结构，它可以看成是键为`FName`、值为`UStruct`的map，通常用于保存结构化游戏数据。例如角色各等级升级需要的经验，不同怪物的攻击力、血量、防御、头像等数据，在初始化Actor时可以查询数据表来获取属性初值。\n\n# 2. 数据表的创建和使用\n\n## 2.1. 在编辑器中创建和使用数据表\n\n**（1）手动创建数据表**\n\n在UE编辑器的内容浏览器中点选 ***右键->其他->数据表格*** 即可创建数据表。\n![创建数据表](1.png)\n\n创建数据表时需要选择一种行结构 ，这种结构可以在编辑器中 ***蓝图->结构*** 直接创建，也可以在C++中创建`UStruct`。\n\n**（2）导入数据生成数据表**\n\nTODO\n\n**（3）在蓝图中使用数据表**\n\n需要在蓝图中使用数据表时，搜索“数据表格”（或\"DataTable\"）即可找到相关的蓝图节点。常用的蓝图节点有：\n\n## 2.2. 在C++中定义和使用数据表\n\n**（1）C++定义行结构**\n\n要使用数据表就先要定义一个结构体作为数据表的行结构。要使结构体可以作为数据表的行结构，就需要继承`FTableRowBase`。 参考下面的代码示例：\n\n```C++\nUSTRUCT(BlueprintType)\nstruct FMyTableRow : public FTableRowBase\n{\n    GENERATED_BODY()\n\n    /** 字段示例 */\n    UPROPERTY(EditEverywhere)\n    float MyField;\n\n    ...  // 添加其他字段\n};\n```\n\n其中`USTRUCT`的`BlueprintType`说明符的作用是在蓝图中给这个结构体生成`Make`和`Break`节点，非必须；而字段MyField的`EditEverywhere`说明符的作用是使字段能在数据表中直接编辑，通常只添加到可手动修改的字段上。\n\n**（2）C++定义数据表**\n\nTODO\n\n**（3）C++使用数据表**\n\n数据表的C++类型是`UDataTable`，下面是一些常用的查表方法。更多方法可以直接查看`UDataTable`源码。\n\n```C++\nUDataTable* DataTable;\nFName RowName = FName(\"RowName\");\nFString DebugMsg = FString(\"DebugMsg\");\n\nFMyRowStruct* RowData = DataTable->FindRow<FMyRowStruct>(RowName, DebugMsg);    // 查找特定行\nTArray<FName> RowNames = DataTable->GetRowNames();                              // 获取所有行名\nTArray<FMyRowStruct*> Rows;\nDataTable->GetAllRows<FMyRowStruct>(DebugMsg, Rows);                            // 获取所有行\n```\n\n**（4）可能遇到的问题**\n\n使用C++结构体作为行结构时可能出现一个问题，就是在UE编辑器中无法编辑数据表中的某些字段。\n这时只需要将该字段`UPROPERTY`中`Category`标识符的分类深度缩减成一层就可以了 ，参考下面的代码示例。推测这是UE编辑器的一个Bug。\n\n```C++\nUSTRUCT(BlueprintType)\nstruct FMyTableRow : public FTableRowBase\n{\n    GENERATED_BODY()\n\n    /** 这个字段*无法*在数据表中编辑 */\n    UPROPERTY(EditEverywhere, Category=\"Cate0|Cate1\")\n    float MyField1;\n\n    /** 这个字段可以在数据表中编辑 */\n    UPROPERTY(EditEverywhere, Category=\"Cate0\")\n    float MyField2;\n};\n```\n\n# 3. 为什么要用数据表？\n看了上面的介绍，可能你会觉得数据表不就是一个轻量的结构化数据集吗？为什么不用JSON、CSV这些格式来存储数据呢？  \n数据表对于非程序人员比较友好。数据表与UE编辑器整合度高，可以在编辑器中直接编辑，并且在处理如类型、引用、材质纹理等资源时可以在编辑器内直接选择，方便快捷。\n数据表可以导出成CSV，也可以通过导入CSV生成。","source":"_posts/DataTable-in-UE4.md","raw":"---\ntitle: UE4中的数据表\ndate: 2023-09-09 15:38:57\ntags: \n  - Unreal Engine\n  - 数据表\ncategories:\n  - Unreal Engine\n---\n\n- UE版本: 4.27.2, 系统: Windows\n\n# 1. 数据表是什么？\n\n数据表（DataTable）是UE4中的一种数据结构，它可以看成是键为`FName`、值为`UStruct`的map，通常用于保存结构化游戏数据。例如角色各等级升级需要的经验，不同怪物的攻击力、血量、防御、头像等数据，在初始化Actor时可以查询数据表来获取属性初值。\n\n# 2. 数据表的创建和使用\n\n## 2.1. 在编辑器中创建和使用数据表\n\n**（1）手动创建数据表**\n\n在UE编辑器的内容浏览器中点选 ***右键->其他->数据表格*** 即可创建数据表。\n![创建数据表](1.png)\n\n创建数据表时需要选择一种行结构 ，这种结构可以在编辑器中 ***蓝图->结构*** 直接创建，也可以在C++中创建`UStruct`。\n\n**（2）导入数据生成数据表**\n\nTODO\n\n**（3）在蓝图中使用数据表**\n\n需要在蓝图中使用数据表时，搜索“数据表格”（或\"DataTable\"）即可找到相关的蓝图节点。常用的蓝图节点有：\n\n## 2.2. 在C++中定义和使用数据表\n\n**（1）C++定义行结构**\n\n要使用数据表就先要定义一个结构体作为数据表的行结构。要使结构体可以作为数据表的行结构，就需要继承`FTableRowBase`。 参考下面的代码示例：\n\n```C++\nUSTRUCT(BlueprintType)\nstruct FMyTableRow : public FTableRowBase\n{\n    GENERATED_BODY()\n\n    /** 字段示例 */\n    UPROPERTY(EditEverywhere)\n    float MyField;\n\n    ...  // 添加其他字段\n};\n```\n\n其中`USTRUCT`的`BlueprintType`说明符的作用是在蓝图中给这个结构体生成`Make`和`Break`节点，非必须；而字段MyField的`EditEverywhere`说明符的作用是使字段能在数据表中直接编辑，通常只添加到可手动修改的字段上。\n\n**（2）C++定义数据表**\n\nTODO\n\n**（3）C++使用数据表**\n\n数据表的C++类型是`UDataTable`，下面是一些常用的查表方法。更多方法可以直接查看`UDataTable`源码。\n\n```C++\nUDataTable* DataTable;\nFName RowName = FName(\"RowName\");\nFString DebugMsg = FString(\"DebugMsg\");\n\nFMyRowStruct* RowData = DataTable->FindRow<FMyRowStruct>(RowName, DebugMsg);    // 查找特定行\nTArray<FName> RowNames = DataTable->GetRowNames();                              // 获取所有行名\nTArray<FMyRowStruct*> Rows;\nDataTable->GetAllRows<FMyRowStruct>(DebugMsg, Rows);                            // 获取所有行\n```\n\n**（4）可能遇到的问题**\n\n使用C++结构体作为行结构时可能出现一个问题，就是在UE编辑器中无法编辑数据表中的某些字段。\n这时只需要将该字段`UPROPERTY`中`Category`标识符的分类深度缩减成一层就可以了 ，参考下面的代码示例。推测这是UE编辑器的一个Bug。\n\n```C++\nUSTRUCT(BlueprintType)\nstruct FMyTableRow : public FTableRowBase\n{\n    GENERATED_BODY()\n\n    /** 这个字段*无法*在数据表中编辑 */\n    UPROPERTY(EditEverywhere, Category=\"Cate0|Cate1\")\n    float MyField1;\n\n    /** 这个字段可以在数据表中编辑 */\n    UPROPERTY(EditEverywhere, Category=\"Cate0\")\n    float MyField2;\n};\n```\n\n# 3. 为什么要用数据表？\n看了上面的介绍，可能你会觉得数据表不就是一个轻量的结构化数据集吗？为什么不用JSON、CSV这些格式来存储数据呢？  \n数据表对于非程序人员比较友好。数据表与UE编辑器整合度高，可以在编辑器中直接编辑，并且在处理如类型、引用、材质纹理等资源时可以在编辑器内直接选择，方便快捷。\n数据表可以导出成CSV，也可以通过导入CSV生成。","slug":"DataTable-in-UE4","published":1,"updated":"2023-09-09T08:40:50.686Z","_id":"clmbrc1g900009wua5pkydvir","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li>UE版本: 4.27.2, 系统: Windows</li>\n</ul>\n<h1 id=\"1-数据表是什么？\"><a href=\"#1-数据表是什么？\" class=\"headerlink\" title=\"1. 数据表是什么？\"></a>1. 数据表是什么？</h1><p>数据表（DataTable）是UE4中的一种数据结构，它可以看成是键为<code>FName</code>、值为<code>UStruct</code>的map，通常用于保存结构化游戏数据。例如角色各等级升级需要的经验，不同怪物的攻击力、血量、防御、头像等数据，在初始化Actor时可以查询数据表来获取属性初值。</p>\n<h1 id=\"2-数据表的创建和使用\"><a href=\"#2-数据表的创建和使用\" class=\"headerlink\" title=\"2. 数据表的创建和使用\"></a>2. 数据表的创建和使用</h1><h2 id=\"2-1-在编辑器中创建和使用数据表\"><a href=\"#2-1-在编辑器中创建和使用数据表\" class=\"headerlink\" title=\"2.1. 在编辑器中创建和使用数据表\"></a>2.1. 在编辑器中创建和使用数据表</h2><p><strong>（1）手动创建数据表</strong></p>\n<p>在UE编辑器的内容浏览器中点选 <em><strong>右键-&gt;其他-&gt;数据表格</strong></em> 即可创建数据表。<br><img src=\"/2023/09/09/DataTable-in-UE4/1.png\" alt=\"创建数据表\"></p>\n<p>创建数据表时需要选择一种行结构 ，这种结构可以在编辑器中 <em><strong>蓝图-&gt;结构</strong></em> 直接创建，也可以在C++中创建<code>UStruct</code>。</p>\n<p><strong>（2）导入数据生成数据表</strong></p>\n<p>TODO</p>\n<p><strong>（3）在蓝图中使用数据表</strong></p>\n<p>需要在蓝图中使用数据表时，搜索“数据表格”（或”DataTable”）即可找到相关的蓝图节点。常用的蓝图节点有：</p>\n<h2 id=\"2-2-在C-中定义和使用数据表\"><a href=\"#2-2-在C-中定义和使用数据表\" class=\"headerlink\" title=\"2.2. 在C++中定义和使用数据表\"></a>2.2. 在C++中定义和使用数据表</h2><p><strong>（1）C++定义行结构</strong></p>\n<p>要使用数据表就先要定义一个结构体作为数据表的行结构。要使结构体可以作为数据表的行结构，就需要继承<code>FTableRowBase</code>。 参考下面的代码示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">USTRUCT</span>(BlueprintType)</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">FMyTableRow</span> : <span class=\"keyword\">public</span> FTableRowBase</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">GENERATED_BODY</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 字段示例 */</span></span><br><span class=\"line\">    <span class=\"built_in\">UPROPERTY</span>(EditEverywhere)</span><br><span class=\"line\">    <span class=\"type\">float</span> MyField;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...  <span class=\"comment\">// 添加其他字段</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>其中<code>USTRUCT</code>的<code>BlueprintType</code>说明符的作用是在蓝图中给这个结构体生成<code>Make</code>和<code>Break</code>节点，非必须；而字段MyField的<code>EditEverywhere</code>说明符的作用是使字段能在数据表中直接编辑，通常只添加到可手动修改的字段上。</p>\n<p><strong>（2）C++定义数据表</strong></p>\n<p>TODO</p>\n<p><strong>（3）C++使用数据表</strong></p>\n<p>数据表的C++类型是<code>UDataTable</code>，下面是一些常用的查表方法。更多方法可以直接查看<code>UDataTable</code>源码。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UDataTable* DataTable;</span><br><span class=\"line\">FName RowName = <span class=\"built_in\">FName</span>(<span class=\"string\">&quot;RowName&quot;</span>);</span><br><span class=\"line\">FString DebugMsg = <span class=\"built_in\">FString</span>(<span class=\"string\">&quot;DebugMsg&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">FMyRowStruct* RowData = DataTable-&gt;<span class=\"built_in\">FindRow</span>&lt;FMyRowStruct&gt;(RowName, DebugMsg);    <span class=\"comment\">// 查找特定行</span></span><br><span class=\"line\">TArray&lt;FName&gt; RowNames = DataTable-&gt;<span class=\"built_in\">GetRowNames</span>();                              <span class=\"comment\">// 获取所有行名</span></span><br><span class=\"line\">TArray&lt;FMyRowStruct*&gt; Rows;</span><br><span class=\"line\">DataTable-&gt;<span class=\"built_in\">GetAllRows</span>&lt;FMyRowStruct&gt;(DebugMsg, Rows);                            <span class=\"comment\">// 获取所有行</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>（4）可能遇到的问题</strong></p>\n<p>使用C++结构体作为行结构时可能出现一个问题，就是在UE编辑器中无法编辑数据表中的某些字段。<br>这时只需要将该字段<code>UPROPERTY</code>中<code>Category</code>标识符的分类深度缩减成一层就可以了 ，参考下面的代码示例。推测这是UE编辑器的一个Bug。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">USTRUCT</span>(BlueprintType)</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">FMyTableRow</span> : <span class=\"keyword\">public</span> FTableRowBase</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">GENERATED_BODY</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 这个字段*无法*在数据表中编辑 */</span></span><br><span class=\"line\">    <span class=\"built_in\">UPROPERTY</span>(EditEverywhere, Category=<span class=\"string\">&quot;Cate0|Cate1&quot;</span>)</span><br><span class=\"line\">    <span class=\"type\">float</span> MyField1;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 这个字段可以在数据表中编辑 */</span></span><br><span class=\"line\">    <span class=\"built_in\">UPROPERTY</span>(EditEverywhere, Category=<span class=\"string\">&quot;Cate0&quot;</span>)</span><br><span class=\"line\">    <span class=\"type\">float</span> MyField2;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-为什么要用数据表？\"><a href=\"#3-为什么要用数据表？\" class=\"headerlink\" title=\"3. 为什么要用数据表？\"></a>3. 为什么要用数据表？</h1><p>看了上面的介绍，可能你会觉得数据表不就是一个轻量的结构化数据集吗？为什么不用JSON、CSV这些格式来存储数据呢？<br>数据表对于非程序人员比较友好。数据表与UE编辑器整合度高，可以在编辑器中直接编辑，并且在处理如类型、引用、材质纹理等资源时可以在编辑器内直接选择，方便快捷。<br>数据表可以导出成CSV，也可以通过导入CSV生成。</p>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>UE版本: 4.27.2, 系统: Windows</li>\n</ul>\n<h1 id=\"1-数据表是什么？\"><a href=\"#1-数据表是什么？\" class=\"headerlink\" title=\"1. 数据表是什么？\"></a>1. 数据表是什么？</h1><p>数据表（DataTable）是UE4中的一种数据结构，它可以看成是键为<code>FName</code>、值为<code>UStruct</code>的map，通常用于保存结构化游戏数据。例如角色各等级升级需要的经验，不同怪物的攻击力、血量、防御、头像等数据，在初始化Actor时可以查询数据表来获取属性初值。</p>\n<h1 id=\"2-数据表的创建和使用\"><a href=\"#2-数据表的创建和使用\" class=\"headerlink\" title=\"2. 数据表的创建和使用\"></a>2. 数据表的创建和使用</h1><h2 id=\"2-1-在编辑器中创建和使用数据表\"><a href=\"#2-1-在编辑器中创建和使用数据表\" class=\"headerlink\" title=\"2.1. 在编辑器中创建和使用数据表\"></a>2.1. 在编辑器中创建和使用数据表</h2><p><strong>（1）手动创建数据表</strong></p>\n<p>在UE编辑器的内容浏览器中点选 <em><strong>右键-&gt;其他-&gt;数据表格</strong></em> 即可创建数据表。<br><img src=\"/2023/09/09/DataTable-in-UE4/1.png\" alt=\"创建数据表\"></p>\n<p>创建数据表时需要选择一种行结构 ，这种结构可以在编辑器中 <em><strong>蓝图-&gt;结构</strong></em> 直接创建，也可以在C++中创建<code>UStruct</code>。</p>\n<p><strong>（2）导入数据生成数据表</strong></p>\n<p>TODO</p>\n<p><strong>（3）在蓝图中使用数据表</strong></p>\n<p>需要在蓝图中使用数据表时，搜索“数据表格”（或”DataTable”）即可找到相关的蓝图节点。常用的蓝图节点有：</p>\n<h2 id=\"2-2-在C-中定义和使用数据表\"><a href=\"#2-2-在C-中定义和使用数据表\" class=\"headerlink\" title=\"2.2. 在C++中定义和使用数据表\"></a>2.2. 在C++中定义和使用数据表</h2><p><strong>（1）C++定义行结构</strong></p>\n<p>要使用数据表就先要定义一个结构体作为数据表的行结构。要使结构体可以作为数据表的行结构，就需要继承<code>FTableRowBase</code>。 参考下面的代码示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">USTRUCT</span>(BlueprintType)</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">FMyTableRow</span> : <span class=\"keyword\">public</span> FTableRowBase</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">GENERATED_BODY</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 字段示例 */</span></span><br><span class=\"line\">    <span class=\"built_in\">UPROPERTY</span>(EditEverywhere)</span><br><span class=\"line\">    <span class=\"type\">float</span> MyField;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...  <span class=\"comment\">// 添加其他字段</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>其中<code>USTRUCT</code>的<code>BlueprintType</code>说明符的作用是在蓝图中给这个结构体生成<code>Make</code>和<code>Break</code>节点，非必须；而字段MyField的<code>EditEverywhere</code>说明符的作用是使字段能在数据表中直接编辑，通常只添加到可手动修改的字段上。</p>\n<p><strong>（2）C++定义数据表</strong></p>\n<p>TODO</p>\n<p><strong>（3）C++使用数据表</strong></p>\n<p>数据表的C++类型是<code>UDataTable</code>，下面是一些常用的查表方法。更多方法可以直接查看<code>UDataTable</code>源码。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UDataTable* DataTable;</span><br><span class=\"line\">FName RowName = <span class=\"built_in\">FName</span>(<span class=\"string\">&quot;RowName&quot;</span>);</span><br><span class=\"line\">FString DebugMsg = <span class=\"built_in\">FString</span>(<span class=\"string\">&quot;DebugMsg&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">FMyRowStruct* RowData = DataTable-&gt;<span class=\"built_in\">FindRow</span>&lt;FMyRowStruct&gt;(RowName, DebugMsg);    <span class=\"comment\">// 查找特定行</span></span><br><span class=\"line\">TArray&lt;FName&gt; RowNames = DataTable-&gt;<span class=\"built_in\">GetRowNames</span>();                              <span class=\"comment\">// 获取所有行名</span></span><br><span class=\"line\">TArray&lt;FMyRowStruct*&gt; Rows;</span><br><span class=\"line\">DataTable-&gt;<span class=\"built_in\">GetAllRows</span>&lt;FMyRowStruct&gt;(DebugMsg, Rows);                            <span class=\"comment\">// 获取所有行</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>（4）可能遇到的问题</strong></p>\n<p>使用C++结构体作为行结构时可能出现一个问题，就是在UE编辑器中无法编辑数据表中的某些字段。<br>这时只需要将该字段<code>UPROPERTY</code>中<code>Category</code>标识符的分类深度缩减成一层就可以了 ，参考下面的代码示例。推测这是UE编辑器的一个Bug。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">USTRUCT</span>(BlueprintType)</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">FMyTableRow</span> : <span class=\"keyword\">public</span> FTableRowBase</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">GENERATED_BODY</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 这个字段*无法*在数据表中编辑 */</span></span><br><span class=\"line\">    <span class=\"built_in\">UPROPERTY</span>(EditEverywhere, Category=<span class=\"string\">&quot;Cate0|Cate1&quot;</span>)</span><br><span class=\"line\">    <span class=\"type\">float</span> MyField1;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 这个字段可以在数据表中编辑 */</span></span><br><span class=\"line\">    <span class=\"built_in\">UPROPERTY</span>(EditEverywhere, Category=<span class=\"string\">&quot;Cate0&quot;</span>)</span><br><span class=\"line\">    <span class=\"type\">float</span> MyField2;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-为什么要用数据表？\"><a href=\"#3-为什么要用数据表？\" class=\"headerlink\" title=\"3. 为什么要用数据表？\"></a>3. 为什么要用数据表？</h1><p>看了上面的介绍，可能你会觉得数据表不就是一个轻量的结构化数据集吗？为什么不用JSON、CSV这些格式来存储数据呢？<br>数据表对于非程序人员比较友好。数据表与UE编辑器整合度高，可以在编辑器中直接编辑，并且在处理如类型、引用、材质纹理等资源时可以在编辑器内直接选择，方便快捷。<br>数据表可以导出成CSV，也可以通过导入CSV生成。</p>\n"}],"PostAsset":[{"_id":"source/_posts/DataTable-in-UE4/1.png","slug":"1.png","post":"clmbrc1g900009wua5pkydvir","modified":0,"renderable":0}],"PostCategory":[{"post_id":"clmbrc1g900009wua5pkydvir","category_id":"clmbrqldi00069wua6hix5ttp","_id":"clmbrqldj00099wua1m4ngh33"}],"PostTag":[{"post_id":"clmbrc1g900009wua5pkydvir","tag_id":"clmbrc1gd00029wua33zr8j4f","_id":"clmbrc1ge00049wua7ikl2j93"},{"post_id":"clmbrc1g900009wua5pkydvir","tag_id":"clmbrqldi00079wua6yy08gqh","_id":"clmbrqldi00089wua34vee8oh"}],"Tag":[{"name":"UnrealEngine","_id":"clmbqb38q0000v4uaee99b4xs"},{"name":"数据表","_id":"clmbrc1gd00029wua33zr8j4f"},{"name":"Unreal Engine","_id":"clmbrqldi00079wua6yy08gqh"}]}}